// Generated by CodiumAI

import Enquirer from 'enquirer';
import fs from 'fs-extra';
import { join } from 'path';
import { DirectoryCleaner } from './directory-cleaner';
import { $ } from 'bun';
import { DATA_DIR, TEST_DIR } from './constants';
import { testDirs } from './tests';

const dc = new DirectoryCleaner({
    workingDir: join(DATA_DIR, TEST_DIR)
});
await dc.setupTestDirs();

describe('DirectoryCleaner', async () => {
    await dc.setupTestDirs();

    it('should have 3 choices', async () => {
        const choices = await dc.getChoices(dc.workingDir);
        expect(choices).toHaveLength(3);
    });

    it('should have small dir', async () => {
        const toDelete = 'small';
        const directories = await dc.getChoices(dc.workingDir, { nameOnly: true });
        expect(directories).toContain(toDelete);
    });
    it('should have huge dir', async () => {
        const toDelete = 'huge';

        let directories = await dc.getChoices(dc.workingDir, { nameOnly: true });
        expect(directories).toContain(toDelete);
    });
    it('should delete huge dir', async () => {
        const toDelete = 'huge';

        await dc.deleteDir(toDelete).catch(() => {});
        const directories = (await dc.getChoices(dc.workingDir, { nameOnly: true })) as string[];
        expect(directories.includes(toDelete)).toBeFalsy();
    });

    it('should delete small dir', async () => {
        const toDelete = 'small';

        await dc.deleteDir(toDelete).catch(() => {});
        const directories = (await dc.getChoices(dc.workingDir, { nameOnly: true })) as string[];
        expect(directories.includes(toDelete)).toBeFalsy();
    });

    it('should have 1 dirs', async () => {
        const directories = await dc.getChoices(dc.workingDir, { nameOnly: true });
        expect(directories).toHaveLength(1);
    });
    it('should delete medium dir', async () => {
        const toDelete = 'medium';
        await dc.deleteDir(toDelete).catch(() => {});
        const directories = (await dc.getChoices(dc.workingDir, { nameOnly: true })) as string[];
        expect(directories.includes(toDelete)).toBeFalsy();
    });
    it('should have 0 dirs', async () => {
        const directories = await dc.getChoices(dc.workingDir, { nameOnly: true });
        expect(directories).toHaveLength(0);
    });
});
